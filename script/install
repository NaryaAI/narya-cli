#!/usr/bin/env bash
set -e

PNM_DIR=${PNM_DIR-"$HOME/.pnm"}
PNM_BIN_DIR="$PNM_DIR/bin"
PNM_MAN_DIR="$PNM_DIR/share/man/man1"

main() {
  say "Installing pnm..."

  need_cmd curl

  # Create the .pnm bin directory and pnm binary if it doesn't exist.
  mkdir -p $PNM_BIN_DIR

  # Create the man directory for future man files if it doesn't exist.
  mkdir -p $PNM_MAN_DIR

  # Store the correct profile file (i.e. .profile for bash or .zshrc for ZSH).
  case $SHELL in
  */zsh)
      PROFILE=$HOME/.zshrc
      PREF_SHELL=zsh
      ;;
  */bash)
      PROFILE=$HOME/.bashrc
      PREF_SHELL=bash
      ;;
  */fish)
      PROFILE=$HOME/.config/fish/config.fish
      PREF_SHELL=fish
      ;;
  */ash)
      PROFILE=$HOME/.profile
      PREF_SHELL=ash
      ;;
  *)
      say "could not detect shell, manually add ${PNM_BIN_DIR} to your PATH."
      exit 1
  esac

  # Only add pnm if it isn't already in PATH.
  if [[ ":$PATH:" != *":${PNM_BIN_DIR}:"* ]]; then
      # Add the pnm directory to the path and ensure the old PATH variables remain.
      echo >> $PROFILE && echo "export PATH=\"\$PATH:$PNM_BIN_DIR\"" >> $PROFILE
  fi

  PNM_REPO="PwnedNoMore/pnm-cli"

  PLATFORM="$(uname -s)"
  case $PLATFORM in
    Linux)
      PLATFORM="unknown-linux-gnu"
      ;;
    Darwin)
      PLATFORM="apple-darwin"
      ;;
    *)
      err "unsupported platform: $PLATFORM"
      ;;
  esac

  ARCHITECTURE="$(uname -m)"
  if [ "${ARCHITECTURE}" = "x86_64" ]; then
    # Redirect stderr to /dev/null to avoid printing errors if non Rosetta.
    if [ "$(sysctl -n sysctl.proc_translated 2>/dev/null)" = "1" ]; then
      ARCHITECTURE="aarch64" # Rosetta.
    else
      ARCHITECTURE="x86_64" # Intel.
    fi
  elif [ "${ARCHITECTURE}" = "arm64" ] ||[ "${ARCHITECTURE}" = "aarch64" ] ; then
    ARCHITECTURE="aarch64" # Arm.
  else
    ARCHITECTURE="x86_64" # Amd.
  fi

  # Compute the URL of the release tarball in the pnm repository.
  RELEASE_URL="https://github.com/${PNM_REPO}/releases/latest/download/"

  BIN_TARBALL_URL="${RELEASE_URL}pnm-${ARCHITECTURE}-${PLATFORM}.tar.gz"

  #TODO: @zek65535 add manpage in the future
  #MAN_TARBALL_URL="${RELEASE_URL}pnm_man_${PNM_VERSION}.tar.gz"

  # Download the binaries tarball and unpack it into the .pnm bin directory.
  say "downloading latest pnm"
  ensure curl -# -L $BIN_TARBALL_URL | tar -xzC $PNM_BIN_DIR

  # Download the man tarball and unpack it into the .pnm man directory.
  #say "downloading manpages"
  #ensure curl -# -L $MAN_TARBALL_URL | tar -xzC $PNM_MAN_DIR

  say "installed - $($PNM_BIN_DIR/pnm --version)"
  say "Detected your preferred shell is ${PREF_SHELL} and added pnm to PATH. Run 'source ${PROFILE}' or start a new terminal session to use pnm."
}

say() {
  printf 'pnm: %s\n' "$1"
}

warn() {
  say "warning: ${1}" >&2
}

err() {
  say "$1" >&2
  exit 1
}

need_cmd() {
  if ! check_cmd "$1"; then
    err "need '$1' (command not found)"
  fi
}

check_cmd() {
  command -v "$1" > /dev/null 2>&1
}

# Run a command that should never fail. If the command fails execution
# will immediately terminate with an error showing the failing command.
ensure() {
  if ! "$@"; then err "command failed: $*"; fi
}

main "$@" || exit 1
