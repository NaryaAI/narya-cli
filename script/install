#!/usr/bin/env bash
set -e

NARYA_DIR=${NARYA_DIR-"$HOME/.narya-ai"}
NARYA_BIN_DIR="$NARYA_DIR/bin"
NARYA_MAN_DIR="$NARYA_DIR/share/man/man1"
NARYA_REPO="NaryaAi/narya-cli"

main() {

  # get the version of narya
  VERSION="$(narya --version 2>/dev/null | cut -d' ' -f2)"

  if [[ ! -z "$VERSION" ]]; then
    echo "narya is already installed, version $VERSION"

    # check latest version of narya from: tag_name of https://api.github.com/repos/NaryaAi/narya-cli/releases/latest
    LATEST_VERSION="$(curl -s https://api.github.com/repos/$NARYA_REPO/releases/latest | grep tag_name | cut -d'"' -f4)"

    echo "Latest narya version is $LATEST_VERSION"

    # if Latest version is equal to installed version, exit
    if [[ "$LATEST_VERSION" == "$VERSION" ]]; then
      echo "You are already using the latest version of narya"
      exit 0
    fi

  fi

  say "Installing narya..."

  need_cmd curl

  # Create the .narya-ai bin directory and narya binary if it doesn't exist.
  mkdir -p $NARYA_BIN_DIR

  # Create the man directory for future man files if it doesn't exist.
  mkdir -p $NARYA_MAN_DIR

  if [ -z "$VERSION" ]; then
    # Store the correct profile file (i.e. .profile for bash or .zshrc for ZSH).
    case $SHELL in
    */zsh)
        PROFILE=$HOME/.zshrc
        PREF_SHELL=zsh
        ;;
    */bash)
        PROFILE=$HOME/.bashrc
        PREF_SHELL=bash
        ;;
    */fish)
        PROFILE=$HOME/.config/fish/config.fish
        PREF_SHELL=fish
        ;;
    */ash)
        PROFILE=$HOME/.profile
        PREF_SHELL=ash
        ;;
    *)
        say "could not detect shell, manually add ${NARYA_BIN_DIR} to your PATH."
        exit 1
    esac

    # Only add narya if it isn't already in PATH.
    if [[ ":$PATH:" != *":${NARYA_BIN_DIR}:"* ]]; then
        # Add the narya directory to the path and ensure the old PATH variables remain.
        echo >> $PROFILE && echo "export PATH=\"$NARYA_BIN_DIR:\$PATH\"" >> $PROFILE
    fi
  fi

  PLATFORM="$(uname -s)"
  case $PLATFORM in
    Linux)
      PLATFORM="unknown-linux-gnu"
      ;;
    Darwin)
      PLATFORM="apple-darwin"
      ;;
    *)
      err "unsupported platform: $PLATFORM"
      ;;
  esac

  ARCHITECTURE="$(uname -m)"
  if [ "${ARCHITECTURE}" = "x86_64" ]; then
    # Redirect stderr to /dev/null to avoid printing errors if non Rosetta.
    if [ "$(sysctl -n sysctl.proc_translated 2>/dev/null)" = "1" ]; then
      ARCHITECTURE="aarch64" # Rosetta.
    else
      ARCHITECTURE="x86_64" # Intel.
    fi
  elif [ "${ARCHITECTURE}" = "arm64" ] ||[ "${ARCHITECTURE}" = "aarch64" ] ; then
    ARCHITECTURE="aarch64" # Arm.
  else
    ARCHITECTURE="x86_64" # Amd.
  fi

  # Compute the URL of the release tarball in the narya repository.
  RELEASE_URL="https://github.com/${NARYA_REPO}/releases/latest/download/"

  BIN_TARBALL_URL="${RELEASE_URL}narya-${ARCHITECTURE}-${PLATFORM}.tar.gz"

  # Download the binaries tarball and unpack it into the .narya-ai bin directory.
  say "downloading latest narya"
  ensure curl -# -L $BIN_TARBALL_URL | tar -xzC $NARYA_BIN_DIR

  say "installed - $($NARYA_BIN_DIR/narya --version)"
  if [ -z "$VERSION" ]; then
    say "Detected your preferred shell is ${PREF_SHELL} and added narya to PATH. Run 'source ${PROFILE}' or start a new terminal session to use narya."
  fi

  # Cleanup old binary
  [ -d "$HOME/.pnm" ] &&`rm -r $HOME/.pnm/; true`
}

say() {
  printf 'narya: %s\n' "$1"
}

warn() {
  say "warning: ${1}" >&2
}

err() {
  say "$1" >&2
  exit 1
}

need_cmd() {
  if ! check_cmd "$1"; then
    err "need '$1' (command not found)"
  fi
}

check_cmd() {
  command -v "$1" > /dev/null 2>&1
}

# Run a command that should never fail. If the command fails execution
# will immediately terminate with an error showing the failing command.
ensure() {
  if ! "$@"; then err "command failed: $*"; fi
}

main "$@" || exit 1
